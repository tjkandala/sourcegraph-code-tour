/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface SchemaForCodeTourTourFiles {
    /**
     * Specifies the title of the code tour.
     */
    title: string
    /**
     * Specifies an optional description for the code tour.
     */
    description?: string
    /**
     * Indicates the git ref (branch/commit/tag) that this tour associate with.
     */
    ref?: string
    /**
     * Specifies whether the tour represents the primary tour for this codebase.
     */
    isPrimary?: boolean
    /**
     * Specifies the list of steps that are included in the code tour.
     */
    steps: {
        /**
         * File path (relative to the workspace root) that the step is associated with.
         */
        file?: string
        /**
         * Directory path (relative to the workspace root) that the step is associated with.
         */
        directory?: string
        /**
         * The view ID (e.g. gistpad.gists) that this step is associated with.
         */
        view?:
            | 'debug'
            | 'debug:breakpoints'
            | 'debug:callstack'
            | 'debug:variables'
            | 'debug:watch'
            | 'explorer'
            | 'extensions'
            | 'extensions:disabled'
            | 'extensions:enabled'
            | 'output'
            | 'problems'
            | 'scm'
            | 'search'
            | 'terminal'
        /**
         * Absolute URI that is associated with the step.
         */
        uri?: string
        /**
         * Line number that the step is associated with.
         */
        line?: number
        /**
         * A regular expression to associate the step with. This is only considered when the line property isn't set, and allows you to associate steps with line content as opposed to ordinal.
         */
        pattern?: string
        /**
         * An optional title for the step.
         */
        title?: string
        /**
         * Description of the step.
         */
        description: string
        /**
         * Text selection that's associated with the step.
         */
        selection?: {
            /**
             * Starting position (line, column) of the text selection range.
             */
            start: {
                /**
                 * Line number (1-based) that the text selection begins on.
                 */
                line: number
                /**
                 * Column number (1-based) that the text selection begins on.
                 */
                character: number
                [k: string]: unknown
            }
            /**
             * Ending position (line, column) of the text selection range.
             */
            end: {
                /**
                 * Line number (1-based) that the text selection ends on.
                 */
                line: number
                /**
                 * Column number (1-based) that the text selection end on.
                 */
                character: number
                [k: string]: unknown
            }
            [k: string]: unknown
        }
        /**
         * Specifies an array of command URIs that will be executed when this step is navigated to.
         */
        commands?: string[]
        [k: string]: unknown
    }[]
    /**
     * Specifies the 'marker' that indicates a line of code represents a step for this tour.
     */
    stepMarker?: string
    /**
     * Specifies the title of the tour that is meant to follow this tour.
     */
    nextTour?: string
    /**
     * Specifies the condition that must be met before this tour is shown. The value of this property is a string that is evaluated as JavaScript.
     */
    when?: string
    [k: string]: unknown
}
